name: "CI/CD pull request"

on:
  push:
    branches:
      - "**"
    paths-ignore:
      - "date"
  pull_request:
    types: [opened, reopened]

permissions:
  contents: read

jobs:
  auto:
    runs-on: ubuntu-latest
    steps:
      - name: "Generate GitHub App token"
        uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
      - name: "Mask GitHub App token"
        run: echo "::add-mask::${{ steps.app-token.outputs.token }}"
      - name: "Checkout repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.app-token.outputs.token }}
          ref: ${{ github.head_ref }}
          persist-credentials: false
      - name: "Import GPG key (optional)"
        env:
          GPG_PRIVATE_KEY: ${{ secrets.APP_GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE: ${{ secrets.APP_GPG_PASSPHRASE }}
        run: |
          mkdir -p ~/.gnupg
          chmod 700 ~/.gnupg
          # Import key
          echo "$GPG_PRIVATE_KEY" | gpg --batch --import
          # Extract first secret key ID
          KEY_ID=$(gpg --batch --list-secret-keys --with-colons | awk -F: '/^sec:/ {print $5; exit}')
          if [ -z "$KEY_ID" ]; then
            echo "Failed to import GPG key" >&2; exit 1; fi
          # Configure git to sign commits
          git config gpg.program gpg
          git config commit.gpgsign true
          git config user.signingkey "$KEY_ID"
          git config user.name "My Commit Signing App"
          git config user.email "github-app-${{ vars.APP_ID }}@users.noreply.github.com"
          # Allow loopback pinentry (needed if passphrase provided)
          echo 'pinentry-mode loopback' >> ~/.gnupg/gpg.conf
          if [ -n "$GPG_PASSPHRASE" ]; then
            echo 'allow-loopback-pinentry' >> ~/.gnupg/gpg-agent.conf
          fi
          echo "Imported GPG key $KEY_ID for commit signing"
      - name: "Write date file"
        run: |
          datetime=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          echo "$datetime" > date
          cat date
      - name: "Commit and push date file"
        env:
          APP_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          git add date
          git commit -m "chore: update date file"
          target_branch="${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"
          echo "Pushing to $target_branch"
          git push "https://x-access-token:${APP_TOKEN}@github.com/${{ github.repository }}.git" "HEAD:${target_branch}"
