name: "CI/CD pull request"

on:
  push:
    branches:
      - "**"
  pull_request:
    types: [opened, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write
  id-token: write

jobs:
  metadata:
    name: "Set CI/CD metadata"
    runs-on: ubuntu-latest
    timeout-minutes: 1
    outputs:
      build_datetime: ${{ steps.variables.outputs.build_datetime }}
      build_timestamp: ${{ steps.variables.outputs.build_timestamp }}
      version: ${{ steps.variables.outputs.version }}
      does_pull_request_exist: ${{ steps.pr_exists.outputs.does_pull_request_exist }}
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: "Set up Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: 16
          cache: npm
      - name: "Install dependencies"
        run: npm ci
      - name: "Build action bundle (dry-run context)"
        run: npm run package
      - name: "Generate GitHub App token"
        uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
      - name: "Mask GitHub App token"
        run: echo "::add-mask::${{ steps.app-token.outputs.token }}"
      - name: "Semantic Release (dry run)"
        uses: cycjimmy/semantic-release-action@v4.1.1
        id: semantic
        with:
          dry_run: true
          extra_plugins: |
            @semantic-release/git
            @semantic-release/npm
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
      - name: "Set CI/CD variables"
        id: variables
        run: |
          datetime=$(date -u +'%Y-%m-%dT%H:%M:%S%z')
          echo "build_datetime=$datetime" >> $GITHUB_OUTPUT
          echo "build_timestamp=$(date --date=$datetime -u +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT
          echo "version=${{steps.semantic.outputs.new_release_version}}" >> $GITHUB_OUTPUT
      - name: "Check if pull request exists"
        id: pr_exists
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          branch_name=${GITHUB_HEAD_REF:-$(echo $GITHUB_REF | sed 's#refs/heads/##')}
          if gh pr list --head $branch_name | grep -q .; then
            echo "does_pull_request_exist=true" >> $GITHUB_OUTPUT
          else
            echo "does_pull_request_exist=false" >> $GITHUB_OUTPUT
          fi
